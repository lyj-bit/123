// Generated by gencpp from file ros_study/Sys.msg
// DO NOT EDIT!


#ifndef ROS_STUDY_MESSAGE_SYS_H
#define ROS_STUDY_MESSAGE_SYS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_study
{
template <class ContainerAllocator>
struct Sys_
{
  typedef Sys_<ContainerAllocator> Type;

  Sys_()
    : cpu_percent(0.0)
    , virtual_memory_percent(0.0)
    , disk_free(0)
    , net_packets_recv(0)
    , coretemp(0.0)  {
    }
  Sys_(const ContainerAllocator& _alloc)
    : cpu_percent(0.0)
    , virtual_memory_percent(0.0)
    , disk_free(0)
    , net_packets_recv(0)
    , coretemp(0.0)  {
  (void)_alloc;
    }



   typedef float _cpu_percent_type;
  _cpu_percent_type cpu_percent;

   typedef float _virtual_memory_percent_type;
  _virtual_memory_percent_type virtual_memory_percent;

   typedef uint64_t _disk_free_type;
  _disk_free_type disk_free;

   typedef uint64_t _net_packets_recv_type;
  _net_packets_recv_type net_packets_recv;

   typedef float _coretemp_type;
  _coretemp_type coretemp;





  typedef boost::shared_ptr< ::ros_study::Sys_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_study::Sys_<ContainerAllocator> const> ConstPtr;

}; // struct Sys_

typedef ::ros_study::Sys_<std::allocator<void> > Sys;

typedef boost::shared_ptr< ::ros_study::Sys > SysPtr;
typedef boost::shared_ptr< ::ros_study::Sys const> SysConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_study::Sys_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_study::Sys_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_study::Sys_<ContainerAllocator1> & lhs, const ::ros_study::Sys_<ContainerAllocator2> & rhs)
{
  return lhs.cpu_percent == rhs.cpu_percent &&
    lhs.virtual_memory_percent == rhs.virtual_memory_percent &&
    lhs.disk_free == rhs.disk_free &&
    lhs.net_packets_recv == rhs.net_packets_recv &&
    lhs.coretemp == rhs.coretemp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_study::Sys_<ContainerAllocator1> & lhs, const ::ros_study::Sys_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_study

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_study::Sys_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_study::Sys_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_study::Sys_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_study::Sys_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_study::Sys_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_study::Sys_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_study::Sys_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c474b8d8a1c88a0d03e2a77e0dd4bce";
  }

  static const char* value(const ::ros_study::Sys_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c474b8d8a1c88a0ULL;
  static const uint64_t static_value2 = 0xd03e2a77e0dd4bceULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_study::Sys_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_study/Sys";
  }

  static const char* value(const ::ros_study::Sys_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_study::Sys_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 cpu_percent\n"
"float32 virtual_memory_percent\n"
"uint64 disk_free\n"
"uint64 net_packets_recv\n"
"float32 coretemp\n"
;
  }

  static const char* value(const ::ros_study::Sys_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_study::Sys_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cpu_percent);
      stream.next(m.virtual_memory_percent);
      stream.next(m.disk_free);
      stream.next(m.net_packets_recv);
      stream.next(m.coretemp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sys_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_study::Sys_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_study::Sys_<ContainerAllocator>& v)
  {
    s << indent << "cpu_percent: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_percent);
    s << indent << "virtual_memory_percent: ";
    Printer<float>::stream(s, indent + "  ", v.virtual_memory_percent);
    s << indent << "disk_free: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.disk_free);
    s << indent << "net_packets_recv: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.net_packets_recv);
    s << indent << "coretemp: ";
    Printer<float>::stream(s, indent + "  ", v.coretemp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_STUDY_MESSAGE_SYS_H
